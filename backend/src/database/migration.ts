import { pool } from './config';

async function executarMigracoes(): Promise<void> {
  try {
    console.log('üöÄ Iniciando migra√ß√µes do Assistente de Manuten√ß√£o...\n');

    // ==========================================
    // 1. TABELA DE USU√ÅRIOS
    // ==========================================
    console.log('üìã Criando tabela usuarios...');
    await pool.query(`
      CREATE TABLE IF NOT EXISTS usuarios (
        id SERIAL PRIMARY KEY,
        email VARCHAR(255) UNIQUE NOT NULL,
        senha VARCHAR(255) NOT NULL,
        nome VARCHAR(255) NOT NULL,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `);
    console.log('‚úì Tabela usuarios criada');

    // ==========================================
    // 2. TABELA DE ATIVOS
    // ==========================================
    console.log('üìã Criando tabela ativos...');
    await pool.query(`
      CREATE TABLE IF NOT EXISTS ativos (
        id SERIAL PRIMARY KEY,
        nome VARCHAR(100) NOT NULL,
        descricao TEXT,
        usuario_id INTEGER NOT NULL REFERENCES usuarios(id) ON DELETE CASCADE,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `);
    console.log('‚úì Tabela ativos criada');

    // ==========================================
    // 3. TABELA DE MANUTEN√á√ïES
    // ==========================================
    console.log('üìã Criando tabela manutencoes...');
    await pool.query(`
      CREATE TABLE IF NOT EXISTS manutencoes (
        id SERIAL PRIMARY KEY,
        ativo_id INTEGER NOT NULL REFERENCES ativos(id) ON DELETE CASCADE,
        tipo_servico VARCHAR(255) NOT NULL,
        data_realizada DATE NOT NULL,
        descricao TEXT,
        proxima_manutencao DATE,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `);
    console.log('‚úì Tabela manutencoes criada');

    // ==========================================
    // 4. √çNDICES PARA PERFORMANCE
    // ==========================================
    console.log('üìã Criando √≠ndices...');

    // √çndices essenciais para as consultas do dashboard e controllers
    await pool.query('CREATE INDEX IF NOT EXISTS idx_ativos_usuario_id ON ativos(usuario_id)');
    await pool.query('CREATE INDEX IF NOT EXISTS idx_manutencoes_ativo_id ON manutencoes(ativo_id)');
    await pool.query('CREATE INDEX IF NOT EXISTS idx_manutencoes_proxima_manutencao ON manutencoes(proxima_manutencao)');
    await pool.query('CREATE INDEX IF NOT EXISTS idx_manutencoes_data_realizada ON manutencoes(data_realizada)');

    console.log('‚úì √çndices criados');

    // ==========================================
    // 5. VERIFICAR ESTRUTURA CRIADA
    // ==========================================
    console.log('üìã Verificando estrutura...');

    const tabelas = await pool.query(`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'public' 
      AND table_name IN ('usuarios', 'ativos', 'manutencoes')
      ORDER BY table_name
    `);

    const tabelasEncontradas = tabelas.rows.map(row => row.table_name);
    console.log('‚úì Tabelas encontradas:', tabelasEncontradas.join(', '));

    // ==========================================
    // 6. INSERIR DADOS DE EXEMPLO (OPCIONAL)
    // ==========================================
    const usuariosExistentes = await pool.query('SELECT COUNT(*) FROM usuarios');
    const totalUsuarios = parseInt(usuariosExistentes.rows[0].count);

    if (totalUsuarios === 0) {
      console.log('üìã Inserindo dados de exemplo...');

      // Usu√°rio de exemplo (senha: 123456)
      const senhaHashExemplo = '$2b$12$rMYSNPHTBx4wjJYXDxqMa.OqmV8W.GxKjJCv5P7JcJKcNcZyQHnue'; // hash de "123456"

      const novoUsuario = await pool.query(`
        INSERT INTO usuarios (email, senha, nome, created_at, updated_at)
        VALUES ($1, $2, $3, NOW(), NOW())
        RETURNING id
      `, ['usuario@exemplo.com', senhaHashExemplo, 'Usu√°rio de Exemplo']);

      const usuarioId = novoUsuario.rows[0].id;

      // Ativos de exemplo
      const ativo1 = await pool.query(`
        INSERT INTO ativos (nome, descricao, usuario_id, created_at, updated_at)
        VALUES ($1, $2, $3, NOW(), NOW())
        RETURNING id
      `, ['Carro - Honda Civic', 'Honda Civic 2020, placa ABC-1234', usuarioId]);

      const ativo2 = await pool.query(`
        INSERT INTO ativos (nome, descricao, usuario_id, created_at, updated_at)
        VALUES ($1, $2, $3, NOW(), NOW())
        RETURNING id
      `, ['Ar Condicionado Escrit√≥rio', 'Ar condicionado split 12.000 BTUs da sala principal', usuarioId]);

      // Manuten√ß√µes de exemplo
      await pool.query(`
        INSERT INTO manutencoes (ativo_id, tipo_servico, data_realizada, descricao, proxima_manutencao, created_at, updated_at)
        VALUES ($1, $2, $3, $4, $5, NOW(), NOW())
      `, [
        ativo1.rows[0].id,
        'Troca de √≥leo e filtro',
        '2024-12-01',
        'Realizada troca de √≥leo 5W30 e filtro de √≥leo',
        '2025-06-01'
      ]);

      await pool.query(`
        INSERT INTO manutencoes (ativo_id, tipo_servico, data_realizada, descricao, proxima_manutencao, created_at, updated_at)
        VALUES ($1, $2, $3, $4, $5, NOW(), NOW())
      `, [
        ativo2.rows[0].id,
        'Limpeza filtros e g√°s',
        '2024-11-15',
        'Limpeza dos filtros e verifica√ß√£o do g√°s refrigerante',
        '2025-05-15'
      ]);

      // Manuten√ß√£o pr√≥xima (urgente para testar dashboard)
      await pool.query(`
        INSERT INTO manutencoes (ativo_id, tipo_servico, data_realizada, descricao, proxima_manutencao, created_at, updated_at)
        VALUES ($1, $2, $3, $4, $5, NOW(), NOW())
      `, [
        ativo1.rows[0].id,
        'Revis√£o geral',
        '2024-10-01',
        'Revis√£o completa do ve√≠culo',
        '2025-06-01' // Pr√≥xima manuten√ß√£o em breve
      ]);

      console.log('‚úì Dados de exemplo inseridos');
      console.log('  üìß Email: usuario@exemplo.com');
      console.log('  üîë Senha: 123456');
      console.log('  üìã 2 ativos criados com manuten√ß√µes');
    } else {
      console.log('‚úì Dados j√° existem, pulando inser√ß√£o de exemplos');
    }

    console.log('\nüéâ Migra√ß√µes conclu√≠das com sucesso!');
    console.log('üìä Estrutura do banco pronta para o Assistente de Manuten√ß√£o');

  } catch (error) {
    console.error('\n‚ùå Erro ao executar migra√ß√µes:', error);
    throw error;
  }
}

// Fun√ß√£o para reverter migra√ß√µes (√∫til para desenvolvimento)
async function reverterMigracoes(): Promise<void> {
  try {
    console.log('‚ö†Ô∏è  Revertendo migra√ß√µes...');

    await pool.query('DROP TABLE IF EXISTS manutencoes CASCADE');
    await pool.query('DROP TABLE IF EXISTS ativos CASCADE');
    await pool.query('DROP TABLE IF EXISTS usuarios CASCADE');

    console.log('‚úì Todas as tabelas removidas');
  } catch (error) {
    console.error('‚ùå Erro ao reverter migra√ß√µes:', error);
    throw error;
  }
}

// Executar migra√ß√µes se o arquivo for executado diretamente
if (require.main === module) {
  const args = process.argv.slice(2);

  if (args.includes('--reset')) {
    // npm run migrate -- --reset
    reverterMigracoes()
      .then(() => executarMigracoes())
      .then(() => {
        console.log('\n‚ú® Reset completo realizado!');
        process.exit(0);
      })
      .catch((error) => {
        console.error('\nüí• Falha no reset:', error);
        process.exit(1);
      });
  } else {
    // npm run migrate
    executarMigracoes()
      .then(() => {
        console.log('\n‚ú® Processo de migra√ß√£o finalizado!');
        process.exit(0);
      })
      .catch((error) => {
        console.error('\nüí• Falha na migra√ß√£o:', error);
        process.exit(1);
      });
  }
}

export { executarMigracoes, reverterMigracoes };